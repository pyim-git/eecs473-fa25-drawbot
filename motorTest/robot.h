#ifndef ROBOT
#define ROBOT


    // @brief initalizes optical sensor
    // REQUIRES:
    //  @param opticalSDA - 
    //  @param opticalSCL - 
    //  @param opticalReadyPin - 
    bool initOPT(int opticalSDA, int opticalSCL, int opticalReadyPin);

    // @brief read from laptop via Bluetooth. Data consists of g-code commands for motor controls and absolute positions generated by openCV
    void readBT();

    // @brief update positions continuously after finishing a g-code execution or after obtaining CV absolute position
    void setPosRobot();
    void setPosOptical(); 

    // @brief compare sensor's position to expected position and check error difference
    void checkForError();

    // @brief g-code exeuction --- (x,y) specifies endpoints. (i,j) specifies arc's center point
    void executeG1(int x, int y); // straight line motion, tells the motor to move to pos X, Y
    void executeG2(int x, int y, int i, int j) ; // clockwise circular arc motion
    void executeG3(int x, int y, int i, int j); // counter-clockwise circular motion

    // --- TOOLS ---
    // Marker Controls
    void markerUp();    // move marker up
    void markerDown();  // move marker down
    void markerChange(int markerNum);   // change currently equipped marker to specified marker

    // Eraser Controls
    void eraserUp();    // move eraser up
    void eraserDown();  // move eraser down

    // Robot Movement
    void moveRelativePos(float x, float y);     // move robot (x,y) relative to its current position
    void moveAbsPos(float x, float y);          // move robot (x,y) relative to the origin point
    void stop();                                // stop robot path - emergency stop

    int distToSteps(float dist); // convert travel distance to motor's steps
#endif